
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "joinEasy"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('joinEasy')
Loading required package: sqldf
Loading required package: gsubfn
Loading required package: proto
Loading required package: RSQLite
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("anti_join")
> ### * anti_join
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anti_join
> ### Title: Anti Join
> 
> ### ** Examples
> 
>     # Example usage:
>     left <- data.frame(id = 100:106, letter = c('a', 'b', 'c', 'd', 'e', 'f', 'g'))
>     random_i <- sample(seq_len(nrow(left)))
>     cutpoint <- round(nrow(left) / 2)
>     right <- left[random_i[seq_len(cutpoint)],]
>     output <- anti_join(left, right, key = "id")
>     output
   id letter
1 102      c
2 104      e
3 105      f
>     # right for comparison:
>     right
   id letter
1 100      a
4 103      d
7 106      g
2 101      b
> 
> 
> 
> cleanEx()
> nameEx("cross_join")
> ### * cross_join
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cross_join
> ### Title: Cross Join
> 
> ### ** Examples
> 
>     # Example usage:
>     left <- data.frame(id = 100:106, letter = c('a', 'b', 'c', 'd', 'e', 'f', 'g'))
>     random_i <- sample(seq_len(nrow(left)))
>     cutpoint <- round(nrow(left) / 2)
>     right <- left[random_i[seq_len(cutpoint)],]
>     output <- cross_join(left, right)
>     output
    id letter  id letter
1  100      a 100      a
2  100      a 103      d
3  100      a 106      g
4  100      a 101      b
5  101      b 100      a
6  101      b 103      d
7  101      b 106      g
8  101      b 101      b
9  102      c 100      a
10 102      c 103      d
11 102      c 106      g
12 102      c 101      b
13 103      d 100      a
14 103      d 103      d
15 103      d 106      g
16 103      d 101      b
17 104      e 100      a
18 104      e 103      d
19 104      e 106      g
20 104      e 101      b
21 105      f 100      a
22 105      f 103      d
23 105      f 106      g
24 105      f 101      b
25 106      g 100      a
26 106      g 103      d
27 106      g 106      g
28 106      g 101      b
> 
> 
> 
> cleanEx()
> nameEx("full_outer_exclusive_join")
> ### * full_outer_exclusive_join
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: full_outer_exclusive_join
> ### Title: Full Outer (INNER Exclusive) Join
> 
> ### ** Examples
> 
>     # Planned example usage:
>     left <- data.frame(id = 100:106, letter = c('a', 'b', 'c', 'd', 'e', 'f', 'g'))
>     random_i <- sample(seq_len(nrow(left)))
>     cutpoint <- round(nrow(left) / 2)
>     right <- left[random_i[seq_len(cutpoint)],]
>     output <- full_outer_exclusive_join(left, right, key = "id")
Warning in full_outer_exclusive_join(left, right, key = "id") :
  full_outer_exclusive_join is not currently supported
>     output
[1] "full_outer_exclusive_join is not currently supported"
> 
> 
> 
> cleanEx()
> nameEx("inner_join")
> ### * inner_join
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inner_join
> ### Title: Inner Join
> 
> ### ** Examples
> 
>     # Example usage:
>     left <- data.frame(id = 100:106, letter = c('a', 'b', 'c', 'd', 'e', 'f', 'g'))
>     random_i <- sample(seq_len(nrow(left)))
>     cutpoint <- round(nrow(left) / 2)
>     right <- left[random_i[seq_len(cutpoint)],]
>     output <- inner_join(left, right, key = "id")
>     output
   id letter
1 100      a
2 101      b
3 103      d
4 106      g
> 
> 
> 
> cleanEx()
> nameEx("joinEasy")
> ### * joinEasy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: joinEasy
> ### Title: Performs Join Operations
> ### Aliases: joinEasy
> ### Keywords: package
> 
> ### ** Examples
> 
> # simple examples of the most important functions
> 
> 
> 
> cleanEx()
> nameEx("left_outer_join")
> ### * left_outer_join
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: left_outer_join
> ### Title: Left Outer Join
> 
> ### ** Examples
> 
>     # Example usage:
>     left <- data.frame(id = 100:106, letter = c('a', 'b', 'c', 'd', 'e', 'f', 'g'))
>     random_i <- sample(seq_len(nrow(left)))
>     cutpoint <- round(nrow(left) / 2)
>     right <- left[random_i[seq_len(cutpoint)],]
>     output <- left_outer_join(left, right, key = "id")
>     output
   id letter
1 100      a
2 101      b
3 102      c
4 103      d
5 104      e
6 105      f
7 106      g
> 
> 
> 
> cleanEx()
> nameEx("right_outer_join")
> ### * right_outer_join
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: right_outer_join
> ### Title: Right Outer Join
> 
> ### ** Examples
> 
>     # Planned example usage:
>     left <- data.frame(id = 100:106, letter = c('a', 'b', 'c', 'd', 'e', 'f', 'g'))
>     random_i <- sample(seq_len(nrow(left)))
>     cutpoint <- round(nrow(left) / 2)
>     right <- left[random_i[seq_len(cutpoint)],]
>     output <- right_outer_join(left, right, key = "id")
Warning in right_outer_join(left, right, key = "id") :
  right_outer_join is not currently supported
>     output
[1] "right_outer_join is not currently supported"
> 
> 
> 
> cleanEx()
> nameEx("semi_join")
> ### * semi_join
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: semi_join
> ### Title: Semi Join
> 
> ### ** Examples
> 
>     # Example usage:
>     left <- data.frame(id = 100:106, letter = c('a', 'b', 'c', 'd', 'e', 'f', 'g'))
>     random_i <- sample(seq_len(nrow(left)))
>     cutpoint <- round(nrow(left) / 2)
>     right <- left[random_i[seq_len(cutpoint)],]
>     output <- semi_join(left, right, key = "id")
>     output
   id letter
1 100      a
2 101      b
3 103      d
4 106      g
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.68 0.1 0.79 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
